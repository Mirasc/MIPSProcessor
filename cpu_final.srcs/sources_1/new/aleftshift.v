`timescale 1ns / 1ps


module aleftshift(
    input [31:0] a,
    input [31:0] b,
    input code,
    output [31:0] result
    );
    wire [31:0]result_temp;
    genvar i;
    mux32bit m32_0(
    .a({31'b0000000000000000000000000000000,a[0]}),
    .op_code(b[4:0]),
    .result(result_temp[0])
    );

    mux32bit m32_1(
    .a({30'b000000000000000000000000000000,a[0],a[1]}),
    .op_code(b[4:0]),
    .result(result_temp[1])
    );

    mux32bit m32_2(
    .a({29'b00000000000000000000000000000,a[0],a[1],a[2]}),
    .op_code(b[4:0]),
    .result(result_temp[2])
    );

    mux32bit m32_3(
    .a({28'b0000000000000000000000000000,a[0],a[1],a[2],a[3]}),
    .op_code(b[4:0]),
    .result(result_temp[3])
    );

    mux32bit m32_4(
    .a({27'b000000000000000000000000000,a[0],a[1],a[2],a[3],a[4]}),
    .op_code(b[4:0]),
    .result(result_temp[4])
    );

    mux32bit m32_5(
    .a({26'b00000000000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5]}),
    .op_code(b[4:0]),
    .result(result_temp[5])
    );

    mux32bit m32_6(
    .a({25'b0000000000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6]}),
    .op_code(b[4:0]),
    .result(result_temp[6])
    );

    mux32bit m32_7(
    .a({24'b000000000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7]}),
    .op_code(b[4:0]),
    .result(result_temp[7])
    );

    mux32bit m32_8(
    .a({23'b00000000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8]}),
    .op_code(b[4:0]),
    .result(result_temp[8])
    );

    mux32bit m32_9(
    .a({22'b0000000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9]}),
    .op_code(b[4:0]),
    .result(result_temp[9])
    );

    mux32bit m32_10(
    .a({21'b000000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10]}),
    .op_code(b[4:0]),
    .result(result_temp[10])
    );

    mux32bit m32_11(
    .a({20'b00000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11]}),
    .op_code(b[4:0]),
    .result(result_temp[11])
    );

    mux32bit m32_12(
    .a({19'b0000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12]}),
    .op_code(b[4:0]),
    .result(result_temp[12])
    );

    mux32bit m32_13(
    .a({18'b000000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13]}),
    .op_code(b[4:0]),
    .result(result_temp[13])
    );

    mux32bit m32_14(
    .a({17'b00000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14]}),
    .op_code(b[4:0]),
    .result(result_temp[14])
    );

    mux32bit m32_15(
    .a({16'b0000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]}),
    .op_code(b[4:0]),
    .result(result_temp[15])
    );

    mux32bit m32_16(
    .a({15'b000000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16]}),
    .op_code(b[4:0]),
    .result(result_temp[16])
    );

    mux32bit m32_17(
    .a({14'b00000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17]}),
    .op_code(b[4:0]),
    .result(result_temp[17])
    );

    mux32bit m32_18(
    .a({13'b0000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18]}),
    .op_code(b[4:0]),
    .result(result_temp[18])
    );

    mux32bit m32_19(
    .a({12'b000000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19]}),
    .op_code(b[4:0]),
    .result(result_temp[19])
    );

    mux32bit m32_20(
    .a({11'b00000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20]}),
    .op_code(b[4:0]),
    .result(result_temp[20])
    );

    mux32bit m32_21(
    .a({10'b0000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21]}),
    .op_code(b[4:0]),
    .result(result_temp[21])
    );

    mux32bit m32_22(
    .a({9'b000000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22]}),
    .op_code(b[4:0]),
    .result(result_temp[22])
    );

    mux32bit m32_23(
    .a({8'b00000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23]}),
    .op_code(b[4:0]),
    .result(result_temp[23])
    );

    mux32bit m32_24(
    .a({7'b0000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24]}),
    .op_code(b[4:0]),
    .result(result_temp[24])
    );

    mux32bit m32_25(
    .a({6'b000000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25]}),
    .op_code(b[4:0]),
    .result(result_temp[25])
    );

    mux32bit m32_26(
    .a({5'b00000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26]}),
    .op_code(b[4:0]),
    .result(result_temp[26])
    );

    mux32bit m32_27(
    .a({4'b0000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27]}),
    .op_code(b[4:0]),
    .result(result_temp[27])
    );

    mux32bit m32_28(
    .a({3'b000,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28]}),
    .op_code(b[4:0]),
    .result(result_temp[28])
    );

    mux32bit m32_29(
    .a({2'b00,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29]}),
    .op_code(b[4:0]),
    .result(result_temp[29])
    );

    mux32bit m32_30(
    .a({1'b0,a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]}),
    .op_code(b[4:0]),
    .result(result_temp[30])
    );

    mux32bit m32_31(
    .a({a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30],a[31]}),
    .op_code(b[4:0]),
    .result(result_temp[31])
    );
    
    generate
        for(i=0;i<32;i=i+1)
            begin:final_process
            and u_and(result[i],result_temp[i],code);
            end
        endgenerate
endmodule
